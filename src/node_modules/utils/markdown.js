import marked from 'marked';
import slugify from 'utils/slugify';

export function parseMarkdown(markdown) {
	const match = /---\r?\n([\s\S]+?)\r?\n---/.exec(markdown);
	const frontMatter = match[1];
	const content = markdown.slice(match[0].length);

    let metadata = {};
    
	frontMatter.split('\n').forEach(keyValuePair => {
        const colonIndex = keyValuePair.indexOf(':');
        const key = keyValuePair.slice(0, colonIndex).trim();
        const value = keyValuePair.slice(colonIndex + 1).trim();
		metadata[key] = value;
	});

	return { metadata, content };
}

export function readMarkdown(markdown, basePath) {
	let { metadata, content } = parseMarkdown(markdown);
	const toc = generateToc(markdown, basePath);
	content = marked(content);

	return { metadata, toc, content };
}

export function generateToc(markdown, basePath) {
	let toc = [];

	const renderer = new marked.Renderer();

	renderer.heading = (text, level, raw) => {
		const anchor = `${renderer.options.headerPrefix}${slugify(raw)}`;
		
		toc.push({
			anchor: anchor,
			level: level,
			text: text
		});

		return `<h${level}>
					<a id="${anchor}" href="${basePath}#${anchor}"></a>
					${text}
				</h${level}>`;
	};

	marked.setOptions({
		renderer: renderer,
		gfm: true,
		tables: true,
		breaks: false,
		pedantic: false,
		sanitize: true,
		smartLists: true,
		smartypants: false
	});

	const build = (collection, key, level, context) => {
		if (key >= collection.length || collection[key].level <= level)
			return key;
		
		const node = collection[key];

		context.push(`<li><a href="${basePath}#${node.anchor}">${node.text}</a>`);
		key++;

		let childContext = [];

		key = build(collection, key, node.level, childContext);

		if (childContext.length > 0) {
			context.push(`<ul>`);
			childContext.forEach(idm => {
				context.push(idm);
			});
			context.push(`</ul>`);
		}

		context.push(`</li>`);
		
		key = build(collection, key, level, context);

		return key;
	};

	marked(markdown);

	let ctx = [];
	ctx.push(`<ul>`);
	build(toc, 0, 0, ctx);
	ctx.push(`</ul>`);

	return ctx.join('');
}